#!/bin/bash

# Create Output Directory
function CreateOutDir {
  # Set default if not provided
  if [[ -z "$CustomOutputDir" ]]; then
    CustomOutputDir="$(pwd)/Rubicon"
  fi
  # Only create if it doesn't already exist
  if [[ -d "$CustomOutputDir" ]]; then
    echo -e "[Output Directory] Directory already exists: $CustomOutputDir"
  else
    mkdir -p "$CustomOutputDir"
    echo -e "[Output Directory] Created output directory at $CustomOutputDir"
  fi
}


# IP Address or Hostname Handling
function IPAddrHandling {
  if [[ $host =~ ^(([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)\.)*([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)$ ]]; then
    ip=$(getent ahosts "$host" | awk '/STREAM/ { print $1; exit }')
    if [[ -n "$ip" ]]; then
      echo "[IP Address] $ip is active on hostname $host"
      return 0
    else
      echo "[IP Address] Failed to resolve $host"
      return 1
    fi

  elif [[ $host =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    ip="$host"
    if fping -c1 -t300 "$ip" &>/dev/null; then
      echo "[IP Address] $ip is active"
      return 0
    else
      echo "[IP Address] $ip is not active"
      return 1
    fi
  else
    echo "[IP Address] Invalid input: $host"
    return 1
  fi
}

function PortTest {
  echo "[PortTest] Testing open ports on $ip"
  timeout 1 bash -c "echo > /dev/tcp/$ip/80" 2>/dev/null
  if [[ $? -eq 0 ]]; then
    echo "[PortTest] Port 80 (HTTP) is open on $ip"
    HTTPOpen=true
  else
    echo "[PortTest] Port 80 (HTTP) is closed or filtered on $ip"
    HTTPOpen=false
  fi
  timeout 1 bash -c "echo > /dev/tcp/$ip/22" 2>/dev/null
  if [[ $? -eq 0 ]]; then
    echo "[PortTest] Port 22 (SSH) is open on $ip"
    SSHOpen=true
  else
    echo "[PortTest] Port 22 (SSH) is closed or filtered on $ip"
    SSHOpen=false
  fi
}

function NMAP_Func {
  echo -e "[NMAP] Starting NMAP scan on $ip"
  if [[ $RunNMAPDeep ]]; then
    sudo nmap -sV -T4 -A -p- -Pn -O $ip | tee "$CustomOutputDir/nmap_$ip.md" > /dev/null
    cat $CustomOutputDir/nmap_$ip.md
  else
    sudo nmap -sV -O -T4 -Pn $ip | tee "$CustomOutputDir/nmap_$ip.md" > /dev/null
  fi
  cat $CustomOutputDir/nmap_$ip.md
  echo -e "[NMAP] NMAP scan on $ip complete"

}

function WPScanFunc {
  echo "[WPScan] Starting WPScan on $ip"
  local base_cmd="wpscan --url http://$ip/wordpress --wp-content-dir -at -eu --disable-tls-checks"
  local output_file="$CustomOutputDir/wpscan_$ip.txt"
  case "$WPScanOutputMode" in
    verbose)
      echo "[WPScan] Verbose only selected"
      eval "$base_cmd"
      ;;
    output)
      echo "[WPScan] Output only selected"
      eval "$base_cmd" > "$output_file"
      ;;
    both|"")
      echo "[WPScan] Verbose and output selected"
      eval "$base_cmd" | tee "$output_file"
      ;;
  esac
  echo "[WPScan] WPScan on $ip complete"
}

function NiktoFunc {
  echo "[Nikto] Starting Nikto scan on $ip"
  local output_file="$CustomOutputDir/nikto_$ip.txt"
  nikto -host "$ip" -nointeractive | tee "$output_file"
  echo "[Nikto] Scan complete — output saved to $output_file"
}

function GobusterFunc {
  echo "[Gobuster] Starting directory scan on $ip"
  echo "[Gobuster] Using wordlist: $GoBusterWLPath"
  local output_file="$CustomOutputDir/gobuster_$ip.txt"
  gobuster dir -u "http://$ip" -w "$GoBusterWLPath" -t 40 | tee "$output_file"
  echo "[Gobuster] Scan complete — output saved to $output_file"
}

function Enum4LinuxFunc {
  echo "[Enum4Linux] Starting enumeration on $ip"
  local output_file="$CustomOutputDir/enum4linux_$ip.txt"
  enum4linux -a "$ip" | tee "$output_file"
  echo "[Enum4Linux] Enumeration complete — output saved to $output_file"
}

function HydraFunc {
  echo "[Hydra] Starting SSH brute-force on $ip"

  local output_file="$CustomOutputDir/hydra_ssh_$ip.txt"
  local base_cmd="hydra -t 4 -o $output_file ssh://$ip"
  local rockyou="/usr/share/wordlists/rockyou.txt"
  local gz_rockyou="/usr/share/wordlists/rockyou.txt.gz"
  # Check for rockyou.txt or download/unzip if missing
  if [[ ! -f "$rockyou" ]]; then
    if [[ -f "$gz_rockyou" ]]; then
      echo "[Hydra] Extracting rockyou.txt from .gz..."
      sudo gunzip "$gz_rockyou"
    else
      echo "[Hydra] rockyou.txt not found. Attempting to download from GitHub..."
      sudo mkdir -p /usr/share/wordlists
      sudo curl -sSL -o "$rockyou" "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Leaked-Databases/rockyou.txt"

      if [[ ! -f "$rockyou" ]]; then
        echo "[Hydra] Failed to download rockyou.txt. Skipping Hydra scan."
        return
      fi
    fi
  fi
  # Use rockyou.txt for both if no creds provided
  if [[ -z "$HydraUser" && -z "$HydraPass" && -z "$HydraUserList" && -z "$HydraPassList" && -z "$HydraComboList" ]]; then
    echo "[Hydra] No credentials provided. Using rockyou.txt for both username and password."
    HydraUserList="$rockyou"
    HydraPassList="$rockyou"
  fi
  # Build hydra command
  if [[ -n "$HydraComboList" ]]; then
    base_cmd+=" -C $HydraComboList"
  elif [[ -n "$HydraUserList" && -n "$HydraPassList" ]]; then
    base_cmd+=" -L $HydraUserList -P $HydraPassList"
  elif [[ -n "$HydraUserList" && -n "$HydraPass" ]]; then
    base_cmd+=" -L $HydraUserList -p $HydraPass"
  elif [[ -n "$HydraUser" && -n "$HydraPassList" ]]; then
    base_cmd+=" -l $HydraUser -P $HydraPassList"
  elif [[ -n "$HydraUser" && -n "$HydraPass" ]]; then
    base_cmd+=" -l $HydraUser -p $HydraPass"
  else
    echo "[Hydra] No valid credentials found. Skipping Hydra scan."
    return
  fi
  echo "[Hydra] Running: $base_cmd"
  eval "$base_cmd" | tee -a "$output_file"
  echo "[Hydra] Scan complete — output saved to $output_file"
}

TheHarvesterFunc() {
    echo "[*] Running theHarvester on $ip..."
    theHarvester -d "$ip" -b all | tee "$CustomOutputDir/theHarvester.txt"
}

AmassFunc() {
    echo "[*] Running amass on $ip..."
    amass enum -d "$ip" | tee "$CustomOutputDir/amass.txt"
}

SubfinderFunc() {
    echo "[*] Running subfinder on $ip..."
    subfinder -d "$ip" | tee "$CustomOutputDir/subfinder.txt"
}

SSLScanFunc() {
    echo "[*] Running sslscan on $ip..."
    sslscan "$ip" | tee "$CustomOutputDir/sslscan.txt"
}


function syntax {
	echo
	echo "░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓█▓▒░░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓███████▓▒░   "
	echo "░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░  "
	echo "░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░  "
	echo "░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░  "
	echo "░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░  "
	echo "░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░  "
	echo "░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓███████▓▒░░▒▓█▓▒░░▒▓██████▓▒░ ░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░  "
	echo
	echo "[XXX] // RUBICON By: FalseBeliefs \\\\ [XXX]"
	echo "[XXX] Syntax: sudo ./rubicon.sh {args}"
	echo "[+] General Options:"
	echo "    [X] -I <ip>             --> Target IP address"
	echo "    [X] -O <dir>            --> Custom output directory"
	echo "[+] Nmap:"
	echo "    [X] -N                  --> Run Nmap"
	echo "    [X] -D                  --> Deep Nmap scan (-sV -T4 -A -p- -Pn -O)"
	echo "    [X] -d                  --> Laxed Nmap scan (-sV -O -T4 -Pn)"
	echo "[+] WPScan:"
	echo "    [X] -W                  --> Run WPScan"
	echo "    [X] -S <mode>           --> WPScan output mode: verbose, output, or both"
	echo "[+] Nikto:"
	echo "    [X] -K                  --> Run Nikto (web vuln scanner)"
	echo "[+] Gobuster:"
	echo "    [X] -B                  --> Run Gobuster"
	echo "    [X] -L <path>           --> Wordlist for Gobuster"
	echo "    [X] -F <bytes>          --> Minimum file size to include in results"
	echo "[+] Enum4Linux:"
	echo "    [X] -E                  --> Run Enum4Linux (SMB user/share enumeration)"
  echo "[+] The Harvester (Web Enumeration):"
	echo "    [X] -G                  --> Run The Harvester"
  echo "[+] AMASS:"
	echo "    [X] -J                  --> Run AMASS"
  echo "[+] Subfinder:"
	echo "    [X] -F                  --> Run Subfimder"
  echo "[+] SSL Scan:"
	echo "    [X] -T                  --> Run SSL Scan"
	echo "[+] Hydra (SSH brute-force):"
	echo "    [X] -A                  --> Run Hydra on SSH"
	echo "    [X] -U <username>       --> Single username"
	echo "    [X] -P <password>       --> Single password"
	echo "    [X] -u <userlist>       --> Username wordlist"
	echo "    [X] -p <passlist>       --> Password wordlist"
	echo "    [X] -C <combo.txt>      --> Colon-separated user:pass list"
  echo "[+] Install Dependencies:"
	echo "    [X] -Z                  --> Install all tools for Rubicon"
	echo "[+] Example:"
	echo "    sudo ./rubicon.sh -I 192.168.1.10 -N -D -W -S both -K -B -L /wordlist.txt -H -u users.txt -p passwords.txt"
	echo
}

InstallDependencies() {
    echo "[*] Checking and installing required tools..."

    TOOLS=(
        nmap wpscan hydra nikto gobuster enum4linux smbmap snmpwalk ldapsearch
        whatweb sqlmap nuclei theHarvester amass subfinder feroxbuster sslscan
        testssl.sh naabu masscan metasploit-framework aquatone
    )
    # Determine package manager
    if command -v apt >/dev/null 2>&1; then
        PKG_MGR="apt"
        UPDATE_CMD="sudo apt update"
        INSTALL_CMD="sudo apt install -y"
    elif command -v dnf >/dev/null 2>&1; then
        PKG_MGR="dnf"
        UPDATE_CMD="sudo dnf check-update"
        INSTALL_CMD="sudo dnf install -y"
    elif command -v pacman >/dev/null 2>&1; then
        PKG_MGR="pacman"
        UPDATE_CMD="sudo pacman -Sy"
        INSTALL_CMD="sudo pacman -S --noconfirm"
    else
        echo "[-] Unsupported package manager. Install dependencies manually."
        return 1
    fi
    $UPDATE_CMD
    for tool in "${TOOLS[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            echo "[+] Installing $tool..."
            if [[ "$tool" == "testssl.sh" ]]; then
                sudo git clone https://github.com/drwetter/testssl.sh /opt/testssl.sh
                sudo ln -sf /opt/testssl.sh/testssl.sh /usr/local/bin/testssl.sh
            elif [[ "$tool" == "wpscan" ]]; then
                sudo gem install wpscan
            elif [[ "$tool" == "enum4linux" ]]; then
                sudo git clone https://github.com/CiscoCXSecurity/enum4linux.git /opt/enum4linux
                sudo ln -sf /opt/enum4linux/enum4linux.pl /usr/local/bin/enum4linux
            elif [[ "$tool" == "aquatone" ]]; then
                ARCH=$(uname -m)
                if [[ $ARCH == "x86_64" ]]; then
                    wget https://github.com/michenriksen/aquatone/releases/download/v1.7.0/aquatone_linux_amd64.zip -O /tmp/aquatone.zip
                else
                    echo "[-] Unsupported architecture for aquatone. Skipping."
                    continue
                fi
                unzip /tmp/aquatone.zip -d /tmp/aquatone
                sudo mv /tmp/aquatone/aquatone /usr/local/bin/
                sudo chmod +x /usr/local/bin/aquatone
            elif [[ "$tool" == "metasploit-framework" ]]; then
                curl https://raw.githubusercontent.com/rapid7/metasploit-framework/master/msfupdate | sudo bash
            else
                $INSTALL_CMD "$tool"
            fi
        else
            echo "[*] $tool is already installed."
        fi
    done
}


# Parse Arguments
RunNMAP=false
RunNMAPDeep=false
RunWPScan=false
WPScanOutputMode="both"
RunGoBuster=false
RunNikto=false
GoBusterWLPath="/usr/share/wordlists/dirb/common.txt"
RunEnum4Linux=false
RunHydra=false
RunTheHarvester=false
RunAmass=false
RunSubfinder=false
RunSSLScan=false
RunInstallDependencies=false

for arg in "$@"; do
  if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
    syntax
    exit 0
  fi
done

if [[ $# -eq 0 ]]; then
  syntax
  exit 1
fi

while getopts "I:O:NDdWKS:B:L:EU:P:u:p:C:GJFTZ" args; do
  case "$args" in
    I) host=${OPTARG} ;;
    Z) RunInstallDependencies=true;;
    G) RunTheHarvester=true;;
    J) RunAmass=true;;
    F) RunSubfinder=true;;
    T) RunSSLScan=true;;
    O) CustomOutputDir=${OPTARG} ;;
    N) RunNMAP=true ;;
    D) RunNMAPDeep=true ;;
    d) RunNMAPDeep=false ;;
    W) RunWPScan=true ;;
    S) WPScanOutputMode=${OPTARG} ;;
    K) RunNikto=true ;;
    B) RunGoBuster=true ;;
    F) MinFileSize=${OPTARG} ;;  # optional filter for output size
    L) GoBusterWLPath=${OPTARG} ;;  # custom wordlist path
    E) RunEnum4Linux=true ;;
    A) RunHydra=true ;;
    U) HydraUser=${OPTARG} ;;
    P) HydraPass=${OPTARG} ;;
    u) HydraUserList=${OPTARG} ;;
    p) HydraPassList=${OPTARG} ;;
    C) HydraComboList=${OPTARG} ;;
  esac
done

function main {
  $RunInstallDependencies && InstallDependencies
  if [[ -z "$host" ]]; then
    echo "[!] Error: Target IP (-I) is required."
    exit 1
  else
    if [[ -n "$host" ]]; then
      if IPAddrHandling "$host"; then
        echo "[IP Address] Resolved IP: $ip"
        CreateOutDir
        PortTest
        $RunNMAP && NMAP_Func
        $RunEnum4Linux && Enum4LinuxFunc
        $RunTheHarvester && TheHarvesterFunc
        $RunAmass && AmassFunc
        $RunSubfinder && SubfinderFunc
        $RunSSLScan && SSLScanFunc
        if $HTTPOpen; then
          $RunWPScan && WPScanFunc
          $RunGoBuster && GobusterFunc
          $RunNikto && NiktoFunc
        else
          echo -e "[PortTest] Port 80 not open... cancelling related scans"
        fi
        if $SSHOpen; then
          $RunHydra && HydraFunc
        else
          echo -e "[PortTest] Port 22 not open... cancelling related scans"
        fi
      else
        echo "[IP Address] Host or IP invalid"
        exit 1
      fi
    fi
  fi
}

main
